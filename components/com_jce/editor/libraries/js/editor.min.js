/**
 * @package   	JCE
 * @copyright 	Copyright (c) 2009-2019 Ryan Demmer. All rights reserved.
 * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * JCE is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

/**
 * Joomla! IeCursor Fix function override
 */
function IeCursorFix() {
    return true;
}

function jInsertEditorText(text, editor) {
    try {
        WFEditor.insert(editor, text);
    } catch (e) {}
}

/**
 * Widget Factory Editor
 */
(function () {
    var svgToggleIcon = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 448 448"><title></title><g id="wf-toggle-icon" stroke="none" stroke-width="1"></g><path d="M280 64.132v59.482c15.84 6.914 30.406 16.803 42.995 29.391 26.443 26.442 41.005 61.6 41.005 98.995s-14.563 72.552-41.005 98.995c-26.442 26.442-61.599 41.005-98.995 41.005s-72.552-14.563-98.995-41.005c-26.442-26.442-41.005-61.6-41.005-98.995s14.563-72.552 41.005-98.995c12.589-12.589 27.155-22.478 42.995-29.392v-59.481c-80.959 24.097-140 99.082-140 187.868 0 108.248 87.753 196 196 196s196-87.752 196-196c0-88.786-59.041-163.77-140-187.868zM196 0h56v224h-56z"></path></svg>';

    var each = tinymce.each,
        DOM = tinymce.DOM,
        Event = tinymce.dom.Event,
        Dispatcher = tinymce.util.Dispatcher;

    function isHidden(el) {
        if (typeof el === "string") {
            el = document.getElementById(el);
        }

        return el && el.style.display === "none";
    }

    var WFEditor = {
        bookmark: null,
        
        getSite: function (base) {
            var site, host;
            // get url from browser
            var u = document.location.href;
            // if bas is a full url
            if (base.indexOf('http') !== -1) {
                // get the host part of the url eg: www.mysite.com
                host = base.substr(base.indexOf('://') + 3);
                // get the
                site = host.substr(host.indexOf('/'));
            } else {
                site = u.substr(0, u.indexOf(base) + base.length);
            }

            if (u.indexOf('/administrator/') !== -1) {
                site = site + 'administrator/';
            }

            return site;
        },
        /**
         * Initialise JContentEditor
         * @param {Object} settings TinyMCE Settings
         */
        init: function (settings) {
            var self = this;

            var base = settings.base_url;
            var site = this.getSite(base);

            // fix https in base url
            if (/https:\/\//.test(document.location.href)) {
                base = base.replace(/http:/, 'https:');
            }

            // set default values
            settings.token = settings.token || 0;
            settings.context = settings.context || "";

            // set preinit object to prevent tinymce from generating baseURL
            window.tinyMCEPreInit = {};
            // set baseURL, suffix and query string
            tinymce.extend(tinymce, {
                baseURL: base + 'components/com_jce/editor/tiny_mce',
                suffix: '',
                query: settings.etag + '&' + settings.token + '=1&context=' + settings.context
            });

            var indent = 'p,h1,h2,h3,h4,h5,h6,blockquote,div,title,style,pre,script,td,ul,li,area,table,thead,tfoot,tbody,tr,section,article,hgroup,aside,figure,object,video,audio';

            // remove submit triggers
            this.settings = tinymce.extend({
                document_base_url: base,
                site_url: site,
                mode: 'textareas',
                schema: 'mixed',
                relative_urls: true,
                entity_encoding: 'raw',
                editor_selector: 'wf-editor',
                editor_deselector: 'wf-no-editor',
                urlconverter_callback: 'WFEditor.convertURL',
                popup_css: false,
                add_form_submit_trigger: false,
                submit_patch: false,
                theme: 'none',
                invalid_elements: 'applet,iframe,object,embed,script,style,body,bgsound,base,basefont,frame,frameset,head,html,id,ilayer,layer,link,meta,name,title,xml',
                plugins: '',
                external_plugins: {},
                whitespace_elements: 'pre,script,style,textarea,code',
                allow_conditional_comments: true,
                fix_list_elements: true,
                //indentation: '2rem',
                indent_before: indent,
                indent_after: indent,
                popup_css: false,
                keep_styles: false,
                update_styles: true,
                compress: {
                    'css': true,
                    'javascript': true
                },
                language_load: false
            }, settings);

            if (this.settings) {
                try {
                    var s = this.settings;

                    if (s.compress.css) {
                        tinymce.extend(this.settings, {
                            content_css: false,
                            editor_css: false
                        });
                    }

                    // mark javascript files loaded
                    this._markLoaded();

                    // skip loading plugin languages that don't exist
                    if (s.skip_plugin_languages) {
                        var sl = tinymce.ScriptLoader,
                            URI = tinyMCE.baseURI;
                        each(s.skip_plugin_languages.split(','), function (n) {
                            if (n) {
                                sl.markDone(URI.toAbsolute('plugins/' + n + '/langs/' + s.language + '.js'));
                                sl.add(URI.toAbsolute('plugins/' + n + '/langs/en.js'));
                            }
                        });
                    }

                    WFEditor.load();
                } catch (e) {
                    //console.log(e);
                }
            }
        },
        _markLoaded: function () {
            var self = this,
                s = this.settings,
                each = tinymce.each,
                ln = s.language.split(',');

            var suffix = s.suffix || '';

            function load(u) {
                tinymce.ScriptLoader.markDone(tinyMCE.baseURL + '/' + u);
            }

            if (s.compress.javascript == 1) {
                each(s.external_plugins, function (url, name) {
                    load(url);
                });

                // Add plugins with languages
                each(s.plugins.split(','), function (n) {
                    if (n) {
                        load('plugins/' + n + '/editor_plugin' + suffix + '.js');

                        each(ln, function (c) {
                            if (c) {
                                load('plugins/' + n + '/langs/' + c + '.js');
                            }
                        });
                    }
                });
            }
        },
        setBookmark: function (ed) {
            var self = this;

            function isHidden(ed) {
                return ed.isHidden() || DOM.getStyle(ed.id + '_ifr', 'visibility') == 'hidden';
            }

            function isEditor(el) {
                return DOM.getParent(el, 'div.mceEditor, div.mceSplitButtonMenu, div.mceListBoxMenu, div.mceDropDown');
            }

            Event.add(document.body, 'mousedown', function (e) {
                var el = e.target;

                if (isEditor(el)) {
                    return;
                }

                if (!isHidden(ed) && ed.selection) {
                    var n = ed.selection.getNode();

                    if (DOM.getParent(n, 'body#tinymce')) {
                        ed.lastSelectionBookmark = ed.selection.getBookmark(1);
                    }
                }
            });
        },
        load: function () {
            var self = this,
                loaded;

            var s = this.settings;

            // pass settings object to tinymce
            tinymce.settings = s;

            // setup editor before init
            tinyMCE.onAddEditor.add(function (mgr, ed) {
                var el = ed.getElement();

                /*ed.onPreInit.add(function () {
                    ed.on = function(evt, callback) {
                        evt = 'on' + ucfirst(evt);
                        ed[evt].add(function(ed, args) {
                            args.editor = ed;
                            callback(args);
                        });
                    };
                });*/

                // set up Joomla stuff
                if (typeof Joomla !== "undefined" && Joomla.editors) {
                    Joomla.editors.instances[ed.id] = {
                        getValue: function () {
                            return self.getContent(ed.id);
                        },
                        setValue: function (value) {
                            self.setContent(ed.id, value);
                        },
                        replaceSelection: function (value) {
                            self.insert(ed.id, value);
                        }
                    };
                }

                // load packer css
                if (s.compress.css) {
                    ed.onPreInit.add(function () {
                        ed.dom.loadCSS(s.site_url + 'index.php?option=com_jce&task=editor.pack&type=css&layout=content&context=' + s.context + '&' + s.token + '=1');
                    });
                }

                // create tabs and toggle
                if (s.theme === "advanced") {
                    self._createToggle(el);
                    self._createTabs(ed);
                }

                // create bookmark
                self.setBookmark(ed);

                // form submit trigger
                ed.onInit.add(function () {
                    ed.onSubmit.addToTop(function () {
                        if (ed.initialized) {
                            ed.isNotDirty = 1;
                            self.getContent(ed.id);
                        }
                    });
                });

                // Form submit patch
                ed.onBeforeRenderUI.add(function () {
                    var n = ed.getElement().form;

                    if (!n || n._mceOldSubmit) {
                        return;
                    }

                    if (!n.submit.nodeType && !n.submit.length) {
                        ed.formElement = n;
                        n._mceOldSubmit = n.submit;
                        n.submit = function () {
                            // Save all instances
                            tinymce.each(tinymce.editors, function (e) {
                                if (e.initialized) {
                                    e.isNotDirty = 1;
                                    self.getContent(e.id);
                                }
                            });

                            return ed.formElement._mceOldSubmit(ed.formElement);
                        };
                        n = null;
                    }
                });

                ed.onWfEditorChange = new Dispatcher();

                ed.onWfEditorChange.add(function(ed, o) {                    
                    if (tinymce.is(o.content)) {
                        ed.setContent(o.content, o);
                        ed.onChange.dispatch();
                    }
                });
            });

            function _load() {
                if (!loaded) {
                    // set loaded flag
                    loaded = true;
                    // create editor
                    return self.preinit();
                }
            }

            // load editor when page fully loaded
            Event.add(window, 'load', function () {
                _load();

                // Init in subform field
                if (window.jQuery) {
                    // add new editor when a subform row is added
                    jQuery(document).on('subform-row-add', function (event, row) {
                        var elements = DOM.select('.wf-editor', row);

                        each(elements, function (el) {
                            var ed = tinymce.EditorManager.get(el.id);
                            // editor does not exist
                            if (!ed) {
                                self.createInstance(el);

                                // create new tinymce editor instance
                                ed = new tinymce.Editor(el.id, s);
                            }

                            // render
                            ed.render();
                        });
                    });
                    // remove editors when a subform row is removed
                    jQuery(document).on('subform-row-remove', function (event, row) {
                        var elements = DOM.select('.wf-editor', row);

                        each(elements, function (el) {
                            var ed = tinymce.EditorManager.get(el.id);

                            if (ed) {
                                tinymce.EditorManager.remove(ed);
                            }
                        });
                    });
                }
            });

            // wait until dom is ready with delay
            Event.add(document, 'init', function () {
                window.setTimeout(function () {
                    _load();
                }, 1000);
            });
        },

        /**
         * Create each textarea instance
         */
        createInstance: function (el) {
            var self = this,
                s = this.settings;

            // get element from id
            if (typeof el === "string") {
                el = DOM.get(el);
            }

            // element not found...?
            if (!el) {
                return;
            }

            // get header
            var header = DOM.getPrev(el, '.wf-editor-header');

            // set textarea dimensions if requires
            if (s.width) {
                DOM.setStyle(el, 'width', s.width);
            }

            if (s.height) {
                DOM.setStyle(el, 'height', s.height);
            }

            self._createToggle(el);

            // get stored state
            var state = tinymce.util.Cookie.get('wf-editor-state-' + el.id);

            // not defined
            if (state === null || typeof state === "undefined") {
                state = tinymce.is(s.toggle_state) ? s.toggle_state : 1;
            }

            // cast to integer
            state = parseInt(state);

            // get toggle option
            var toggle = tinymce.is(s.toggle) ? parseInt(s.toggle) : 1;

            // only disable editor if you can switch it back on
            if (!state && toggle) {
                DOM.removeClass(el, 'wf-editor');
                DOM.addClass(el, 'wf-no-editor');

                DOM.hide(DOM.select('ul.nav-tabs', header));
                DOM.addClass(el.parentNode, 'wf-editor-toggle-off');
            }
        },

        /**
         * Backwards compatability
         */
        create: function(elements) {
            // must be an array
            if (typeof elements === "string") {
                // find existing editors and remove
                var ed = tinymce.get(elements);

                if (ed) {
                    tinymce.remove(ed);
                }

                elements = [elements];
            }
            
            return this.preinit(elements);
        },

        /**
         * Preinit before initialising tinymce
         */
        preinit: function (elements) {
            var self = this,
                s = this.settings;

            try {
                // create the toggle button
                if (s.theme === "advanced") {
                    // if elements is empty, use default selector
                    elements = elements || DOM.select('.wf-editor');

                    each(elements, function (el) {
                        DOM.show(el);
                        self.createInstance(el);
                    });
                }

                tinymce.init(s);
            } catch (e) {
            }
        },

        _toggleEditor: function (el) {
            var self = this;

            var ed = tinymce.get(el.id);

            // turn it on
            if (!ed) {
                // add loader
                DOM.addClass(el.parentNode, 'mce-loading');

                DOM.removeClass(el, 'wf-no-editor');
                DOM.removeClass(el.parentNode, 'wf-editor-toggle-off');

                // store state
                tinymce.util.Cookie.set('wf-editor-state-' + el.id, 1);

                // switch editor on
                tinymce.execCommand('mceToggleEditor', false, el.id);

                // remove loader
                setTimeout(function () {
                    DOM.removeClass(el.parentNode, 'mce-loading');
                }, 1000);
            } else {
                if (DOM.hasClass(el, 'wf-no-editor')) {                    
                    DOM.addClass(el, 'wf-editor');
                    DOM.removeClass(el, 'wf-no-editor');

                    DOM.setStyle(DOM.select('ul.nav-tabs', el.parentNode), 'display', '');
                    DOM.removeClass(el.parentNode, 'wf-editor-toggle-off');

                    // store state
                    tinymce.util.Cookie.set('wf-editor-state-' + el.id, 1);

                    var activeTab = sessionStorage.getItem('wf-editor-tabs-' + ed.id) || ed.settings.active_tab || 'wf-editor-wysiwyg';

                    // hide textarea
                    DOM.hide(ed.getElement());

                    switch (activeTab) {
                        case 'wf-editor-wysiwyg':
                            ed.show();
                            break;
                        case 'wf-editor-source':
                            ed.plugins.source.toggle();
                            break;
                        case 'wf-editor-preview':
                            ed.plugins.preview.toggle();
                            break;
                    }
                } else {             
                    DOM.addClass(el, 'wf-no-editor');

                    DOM.hide(DOM.select('ul.nav-tabs', el.parentNode));
                    DOM.addClass(el.parentNode, 'wf-editor-toggle-off');

                    var height = sessionStorage.getItem('wf-editor-container-height');

                    // set textarea height
                    if (height && !ed.getParam('fullscreen_enabled')) {
                        DOM.setStyle(ed.getElement(), 'height', height);
                    }

                    // store state
                    tinymce.util.Cookie.set('wf-editor-state-' + el.id, 0);

                    // hide editor (and trigger save)
                    ed.hide();

                    // pass content to textarea
                    this.getContent(ed.id);

                    // hide source
                    if (ed.plugins.source) {
                        ed.plugins.source.hide();
                    }

                    // hide preview
                    if (ed.plugins.preview) {
                        ed.plugins.preview.hide();
                    }

                    DOM.setStyle(ed.getElement(), 'display', '');
                }
            }
        },

        // Get a reference to the current editor
        _getEditor: function (el) {
            var ed, win = window;

            // tinymce is in the parent window
            if (!win.tinymce && window.parent.tinymce) {
                win = window.parent;
            }

            if (el) {
                if (typeof el === 'string') {
                    el = document.getElementById(el);
                }

                // use element passed in
                if (el && el.id) {
                    ed = win.tinymce.get(el.id);
                }
            }

            // get active editor
            if (!ed) {
                ed = win.tinymce.activeEditor;
            }

            // return tinymce
            if (ed && !isHidden(ed.id + '_parent')) {
                return ed;
            }

            if (ed && document.getElementById(ed.id + '_editor_source') && !isHidden(ed.id + '_editor_source')) {
                return ed.plugins.source;
            }

            return false;
        },

        _loadContent: function (ed) {
            var el = ed.getElement();

            // editor is hidden
            if (isHidden(ed.id + '_parent')) {
                if (ed.plugins.source) {
                    var code = ed.plugins.source.getContent();

                    if (code !== null) {
                        if (!/TEXTAREA|INPUT/i.test(el.nodeName)) {
                            el.innerHTML = code;
                        } else {
                            el.value = code;
                        }

                        ed.load();
                    }
                }
            }
        },

        _createToggle: function (el) {
            var self = this,
                s = this.settings,
                toggle = tinymce.is(s.toggle) ? s.toggle : 1;

            if (!toggle) {
                return;
            }

            // get header
            var btn, header = DOM.getPrev(el, '.wf-editor-header');

            // create it if it doesn't exist (K2, WidgetKit etc.)
            if (!header) {
                header = this._createHeader(el);
            }

            if (window.Joomla && window.Joomla.WebComponents) {
                DOM.addClass(DOM.select('.wf-editor-toggle'), 'wf-editor-toggle-inverse');
            }

            if (DOM.select('button.wf-editor-toggle', header).length === 0) {
                // create toggle button
                btn = DOM.add(header, 'button', {
                    'class': 'wf-editor-toggle btn btn-link'
                }, '' + svgToggleIcon + (s.toggle_label || ""));

                Event.add(btn, 'click', function (e) {
                    e.preventDefault();
                    self._toggleEditor(el);
                });
            }
        },

        setActiveLine: function(ed, pos) {
            var blocks = [];

            tinymce.each(ed.schema.getBlockElements(), function (value, name) {
                if (/[^a-zA-Z0-9-]/.test(name)) {
                    return true;
                }
                
                blocks.push(name.toLowerCase());
            });

            // get number of lines
            var nodes = ed.getBody().querySelectorAll(blocks.join(',')), node = nodes[pos] || null;

            if (node) {
                ed.focus();
                ed.selection.setCursorLocation(node);
                ed.selection.scrollIntoView(node);
            }
        },

        _toggleTab: function (ed, tab) {
            var self = this,
                s = this.settings;

            // get textarea element
            var el = ed.getElement();

            // set loader
            DOM.addClass(el.parentNode, 'mce-loading');

            // store sizes before hiding editor
            if (!isHidden(ed.id + '_parent')) {

                if (!DOM.hasClass(el.parentNode, 'mce-fullscreen')) {
                    ed.settings.container_height = ed.getContainer().offsetHeight;
                    // store in session
                    sessionStorage.setItem('wf-editor-container-height', ed.settings.container_height);

                    ed.settings.container_width = ed.getContainer().offsetWidth;
                    // store in session
                    sessionStorage.setItem('wf-editor-container-width', ed.settings.container_width);

                    // store interface height
                    function getInterfaceHeight() {
                        var h = 0,
                            ca = ed.getContentAreaContainer(),
                            p = ca.parentNode;

                        tinymce.each(p.childNodes, function (n) {
                            if (n === ca) {
                                return;
                            }

                            h += n.offsetHeight;
                        });

                        return h;
                    }

                    ed.settings.interface_height = getInterfaceHeight();
                    // store in session
                    sessionStorage.setItem('wf-editor-interface-height', ed.settings.interface_height);
                }
            }

            // source code
            if (tab === "wf-editor-source") {

                // hide editor
                ed.hide();

                // hide textarea
                DOM.hide(el);

                // hide preview
                if (ed.plugins.preview) {
                    ed.plugins.preview.hide();
                }

                // toggle source code
                return ed.plugins.source.toggle();
            }

            // preview
            if (tab === "wf-editor-preview") {
                // pass content to textarea and load
                self._loadContent(ed);

                ed.hide();
                // hide textarea
                DOM.hide(el);

                // hide source
                if (ed.plugins.source) {
                    ed.plugins.source.hide();
                }

                ed.onToggleTab.dispatch(ed, tab);

                // toggle preview
                return ed.plugins.preview.toggle();
            }

            // pass content to textarea and load
            self._loadContent(ed);

            if (ed.plugins.source) {
                var pos = ed.plugins.source.getCursorPos();

                if (pos) {
                    ed.activeLine = pos;
                }
                
                ed.plugins.source.hide();
            }

            if (ed.plugins.preview) {
                ed.plugins.preview.hide();
            }

            // resize iframe
            DOM.setStyle(ed.id + '_ifr', 'max-width', DOM.getStyle(el.parentNode, 'max-width'));

            ed.show();

            // move to stored bookmark
            /*if (ed.lastSelectionBookmark) {
                ed.selection.moveToBookmark(ed.lastSelectionBookmark);
            }*/

            // update cursor location
            if (ed.activeLine) {
                window.setTimeout(function() {
                    self.setActiveLine(ed, ed.activeLine);
                }, 10);
            }

            DOM.removeClass(el.parentNode, 'mce-loading');
        },

        _textareaResize: function (el) {
            var header = DOM.getPrev(el, '.wf-editor-header'),
                container = header.parentNode;

            Event.add(el, 'mousedown', function (e) {
                // Register envent handlers
                var mm = Event.add(el, 'mousemove', function (e) {
                    container.style.maxWidth = el.offsetWidth + 'px';
                });

                var mu = Event.add(el, 'mouseup', function (e) {
                    Event.remove(el, 'mousemove', mm);
                    Event.remove(el, 'mouseup', mu);
                    container.style.maxWidth = el.offsetWidth + 'px';
                });
            });
        },

        _createHeader: function (element) {
            var container = DOM.create('div', {
                'class': 'editor wf-editor-container'
            }, '<div class="wf-editor-header"></div>');

            // add container before textarea
            element.parentNode.insertBefore(container, element);
            // add element to container
            DOM.add(container, element);
            // set header
            header = container.firstChild;

            return header;
        },

        _createTabs: function (ed) {
            var self = this,
                s = this.settings;

            // get plugins list as array
            var plugins = s.plugins.split(',');

            // we need at least one of these to show tabs
            if (tinymce.inArray(plugins, 'preview') < 0 && tinymce.inArray(plugins, 'source', plugins) < 0) {
                return false;
            }

            // get header
            var header = DOM.getPrev(ed.getElement(), '.wf-editor-header');

            // create it if it doesn't exist (K2, WidgetKit etc.)
            if (!header) {
                header = this._createHeader(ed.getElement());
            }

            // tabs exist, exit...
            if (DOM.select('ul.wf-editor-tabs', header).length) {
                return;
            }

            // create tab event
            ed.onToggleTab = new tinymce.util.Dispatcher(ed);

            var ul = DOM.add(header, 'ul', {
                'class': 'wf-editor-tabs nav nav-tabs'
            });

            var activeTab = sessionStorage.getItem('wf-editor-tabs-' + ed.id) || ed.settings.active_tab || 'wf-editor-wysiwyg';

            // Editor tab
            var editorTab = DOM.add(ul, 'li', {'class' : 'nav-item'}, '<a href="#wf-editor-wysiwyg" class="nav-link">' + ed.getLang('tab.wysiwyg', 'Editor') + '</a>');

            // Source tab
            if (tinymce.inArray(plugins, 'source') !== -1) {
                var sourceTab = DOM.add(ul, 'li', {'class' : 'nav-item'}, '<a href="#wf-editor-source" class="nav-link">' + ed.getLang('tab.code', 'Code') + '</a>');

                if (activeTab === "wf-editor-source") {
                    DOM.addClass(sourceTab, 'active');
                }
            }

            // Preview tab
            if (tinymce.inArray(plugins, 'preview') !== -1) {
                var previewTab = DOM.add(ul, 'li', {'class' : 'nav-item'}, '<a href="#wf-editor-preview" class="nav-link">' + ed.getLang('tab.preview', 'Preview') + '</a>');

                if (activeTab === "wf-editor-preview") {
                    DOM.addClass(previewTab, 'active');
                }
            }

            if (activeTab === 'wf-editor-wysiwyg') {
                DOM.addClass(editorTab, 'active');
                DOM.addClass(DOM.select('a', editorTab), 'active');
            }

            // Add tab click events
            Event.add(ul, 'click', function (e) {
                e.preventDefault();

                var n = e.target;

                if (n.nodeName !== "A") {
                    return;
                }

                var p = n.parentNode;

                if (DOM.hasClass(p, 'active')) {
                    return;
                }

                DOM.removeClass(DOM.select('li, a', ul), 'active');
                DOM.addClass(p, 'active');
                DOM.addClass(n, 'active');

                // get the action from tab href
                var action = n.href.substring(n.href.indexOf('#') + 1);

                // store current tab in a cookie
                sessionStorage.setItem('wf-editor-tabs-' + ed.id, action);

                self._toggleTab(ed, action);
            });
        },

        _wrapText: function (el, s) {

            if (s) {
                el.setAttribute("wrap", "soft");
            } else {
                el.removeAttribute("wrap");
            }
        },

        /**
         * Set the editor content
         * @param {String} id The editor id
         * @param {String} html The html content to set
         */
        setContent: function (id, html) {
            var ed = this._getEditor(id);

            if (ed) {
                ed.setContent(html);
            } else {
                document.getElementById(id).value = html;
            }
        },
        /**
         * Get the editor content
         * @param {String} id The editor id
         */
        getContent: function (id) {
            var ed = this._getEditor(id);

            // pass content to textarea and return
            if (ed) {
                return ed.save();
            }

            // return textarea content
            return document.getElementById(id).value;
        },
        /**
         * Insert content into the editor. This function is provided for editor-xtd buttons and includes methods for inserting into textareas
         * @param {String} el The editor id
         * @param {String} v The text to insert
         */
        insert: function (el, v) {
            // get an editor object
            var ed = this._getEditor(el);

            // insert into textarea if editor not loaded or is hidden
            if (!ed) {
                if (typeof el === "string") {
                    el = document.getElementById(el);
                }

                if (el && !isHidden(el)) {
                    this.insertIntoTextarea(el, v);
                }

                return true;
            }

            // editor found, insert
            if (ed) {
                // tinymce
                if (ed.execCommand) {
                    // textarea visible
                    if (!isHidden(ed.getElement())) {
                        this.insertIntoTextarea(ed.getElement(), v);

                        return true;
                    }

                    if (ed.lastSelectionBookmark) {
                        ed.selection.moveToBookmark(ed.lastSelectionBookmark);
                    }

                    ed.execCommand('mceInsertContent', false, v);
                    return true;
                }

                // code editor
                ed.insertContent(v);

                return true;
            }

            return false;
        },
        insertIntoTextarea: function (el, v) {
            // IE
            if (document.selection) {
                el.focus();
                var s = document.selection.createRange();
                s.text = v;
                // Mozilla / Netscape
            } else {
                if (el.selectionStart || el.selectionStart == '0') {
                    var startPos = el.selectionStart;
                    var endPos = el.selectionEnd;
                    el.value = el.value.substring(0, startPos) + v + el.value.substring(endPos, el.value.length);
                    // Other
                } else {
                    el.value += v;
                }
            }
        },
        convertURL: function (url, elm, save, name) {
            var ed = tinymce.EditorManager.activeEditor,
                s = tinymce.settings,
                base = s.document_base_url;

            if (!url) {
                return url;
            }

            // Don't convert link href since thats the CSS files that gets loaded into the editor also skip local file URLs
            if (!s.convert_urls || (elm && elm.nodeName === 'LINK') || url.indexOf('file:') === 0) {
                return url;
            }

            if (url === base || url === base.substring(0, base.length - 1) || url.charAt(0) === '/') {
                return url;
            }

            // mixed urls allows absolute and relative urls based on user input
            if (!s.mixed_urls) {                
                // Convert to relative
                if (s.relative_urls) {
                    
                    // only if absolute
                    if (url.indexOf(base) === 0) {
                        return ed.documentBaseURI.toRelative(url);
                    }
                    
                    return url;
                }

                // Convert to absolute
                url = ed.documentBaseURI.toAbsolute(url, s.remove_script_host);
            }

            if (s.protocol_relative) {
                url = url.replace(/(http|https|ftp|ftps):\/\//, '//');
            }

            return url;
        },
        indent: function (h) {
            // simple indentation
            h = h.replace(/\n+/g, '\n');

            return tinymce.trim(h);
        }
    };
    window.WFEditor = WFEditor;
}());